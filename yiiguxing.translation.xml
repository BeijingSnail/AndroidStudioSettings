<application>
  <component name="AppStorage">
    <histories>
      <item value="cross Axis Alignment" />
      <item value="indefinitely" />
      <item value="* Defines the interface by which applications can receive notifications of routing * changes for the associated {@link AudioRouting}." />
      <item value="add On Routing Changed Listener" />
      <item value="Could not resolve org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.31." />
      <item value="Returns an HTML escaped representation of the given plain text." />
      <item value="Set the amount of visible height in pixels used to define when to trigger a scrim visibility * change. * * &lt;p&gt;If the visible height of this view is less than the given value, the scrims will be made * visible, otherwise they are hidden. * * @param height value in pixels used to define when to trigger a scrim visibility change * @attr ref * com.google.android.material.R.styleable#CollapsingToolbarLayout_scrimVisibleHeightTrigger" />
      <item value="* Set the amount of visible height in pixels used to define when to trigger a scrim visibility * change. * * &lt;p&gt;If the visible height of this view is less than the given value, the scrims will be made * visible, otherwise they are hidden. * * @param height value in pixels used to define when to trigger a scrim visibility change * @attr ref * com.google.android.material.R.styleable#CollapsingToolbarLayout_scrimVisibleHeightTrigger" />
      <item value="* Sets the text color and size for the expanded title from the specified TextAppearance resource. * * @attr ref * com.google.android.material.R.styleable#CollapsingToolbarLayout_expandedTitleTextAppearance" />
      <item value="* Set whether the content scrim and/or status bar scrim should be shown or not. Any change in the * vertical scroll may overwrite this value. * * @param shown whether the scrims should be shown * @param animate whether to animate the visibility change * @see #getStatusBarScrim() * @see #getContentScrim() */" />
      <item value="* Set the duration used for scrim visibility animations. * * @param duration the duration to use in milliseconds * @attr ref com.google.android.material.R.styleable#CollapsingToolbarLayout_scrimAnimationDuration" />
      <item value="he drawable to use as a scrim for the status bar content when the CollapsingToolbarLayout has been scrolled sufficiently off screen. Only works on Lollipop when used together with android:fitSystemWindows=&quot;true&quot;" />
      <item value="Inserts or replaces the given entities in the database using a transaction." />
      <item value="* Deletes all matching entities without detaching them from the identity scope (aka session/cache). Note that this * method may lead to stale entity objects in the session cache. Stale entities may be returned when loaded by * their * primary key, but not using queries." />
      <item value="* Inserts or replaces the given entities in the database using a transaction. * * @param entities The entities to insert." />
      <item value="Calculated the estimated scroll distance in each direction given velocities on both axes. * * @param velocityX Fling velocity on the horizontal axis. * @param velocityY Fling velocity on the vertical axis. * * @return array holding the calculated distances in x and y directions" />
      <item value="* Set a {@link OnFlingListener} for this {@link RecyclerView}. * &lt;p&gt; * If the {@link OnFlingListener} is set then it will receive * calls to {@link #fling(int,int)} and will be able to intercept them. * * @param onFlingListener The {@link OnFlingListener} instance." />
      <item value="* Return a resource identifier for the given resource name. A fully * qualified resource name is of the form &quot;package:type/entry&quot;. The first * two components (package and type) are optional if defType and * defPackage, respectively, are specified here. * * &lt;p&gt;Note: use of this function is discouraged. It is much more * efficient to retrieve resources by identifier than by name. * * @param name The name of the desired resource. * @param defType Optional default resource type to find, if &quot;type/&quot; is * not included in the name. Can be null to require an * explicit type. * @param defPackage Optional default package to find, if &quot;package:&quot; is * not included in the name. Can be null to require an * explicit package. * * @return int The associated resource identifier. Returns 0 if no such * resource was found. (0 is not a valid resource ID.)" />
      <item value="* A {@link NavigableSet} implementation based on a {@link TreeMap}. * The elements are ordered using their {@linkplain Comparable natural * ordering}, or by a {@link Comparator} provided at set creation * time, depending on which constructor is used. * * &lt;p&gt;This implementation provides guaranteed log(n) time cost for the basic * operations ({@code add}, {@code remove} and {@code contains}). * * &lt;p&gt;Note that the ordering maintained by a set (whether or not an explicit * comparator is provided) must be &lt;i&gt;consistent with equals&lt;/i&gt; if it is to * correctly implement the {@code Set} interface. (See {@code Comparable} * or {@code Comparator} for a precise definition of &lt;i&gt;consistent with * equals&lt;/i&gt;.) This is so because the {@code Set} interface is defined in * terms of the {@code equals} operation, but a {@code TreeSet} instance * performs all element comparisons using its {@code compareTo} (or * {@code compare}) method, so two elements that are deemed equal by this method * are, from the standpoint of the set, equal. The behavior of a set * &lt;i&gt;is&lt;/i&gt; well-defined even if its ordering is inconsistent with equals; it * just fails to obey the general contract of the {@code Set} interface. * * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; * If multiple threads access a tree set concurrently, and at least one * of the threads modifies the set, it &lt;i&gt;must&lt;/i&gt; be synchronized * externally. This is typically accomplished by synchronizing on some * object that naturally encapsulates the set. * If no such object exists, the set should be &quot;wrapped&quot; using the * {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet} * method. This is best done at creation time, to prevent accidental * unsynchronized access to the set: &lt;pre&gt; * SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));&lt;/pre&gt; * * &lt;p&gt;The iterators returned by this class's {@code iterator} method are * &lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is * created, in any way except through the iterator's own {@code remove} * method, the iterator will throw a {@link ConcurrentModificationException}. * Thus, in the face of concurrent modification, the iterator fails quickly * and cleanly, rather than risking arbitrary, non-deterministic behavior at * an undetermined time in the future. * * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed * as it is, generally speaking, impossible to make any hard guarantees in the * presence of unsynchronized concurrent modification. Fail-fast iterators * throw {@code ConcurrentModificationException} on a best-effort basis. * Therefore, it would be wrong to write a program that depended on this * exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators * should be used only to detect bugs.&lt;/i&gt; * * &lt;p&gt;This class is a member of the * &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt; * Java Collections Framework&lt;/a&gt;. * * @param &lt;E&gt; the type of elements maintained by this set" />
      <item value="* ArraySet is a generic set data structure that is designed to be more memory efficient than a * traditional {@link java.util.HashSet}. The design is very similar to * {@link ArrayMap}, with all of the caveats described there. This implementation is * separate from ArrayMap, however, so the Object array contains only one item for each * entry in the set (instead of a pair for a mapping). * * &lt;p&gt;Note that this implementation is not intended to be appropriate for data structures * that may contain large numbers of items. It is generally slower than a traditional * HashSet, since lookups require a binary search and adds and removes require inserting * and deleting entries in the array. For containers holding up to hundreds of items, * the performance difference is not significant, less than 50%.&lt;/p&gt; * * &lt;p&gt;Because this container is intended to better balance memory use, unlike most other * standard Java containers it will shrink its array as items are removed from it. Currently * you have no control over this shrinking -- if you set a capacity and then remove an * item, it may reduce the capacity to better match the current size. In the future an * explicit call to set the capacity should turn off this aggressive shrinking behavior.&lt;/p&gt;" />
      <item value="* Return the blending mode used to apply the tint to the background * drawable, if specified. * * @return the blending mode used to apply the tint to the background * drawable, null if no blend has previously been configured * @attr ref android.R.styleable#View_backgroundTintMode * @see #setBackgroundTintBlendMode(BlendMode)" />
      <item value="ItemTouchHelper is in idle state. At this state, either there is no related motion event by * the user or latest motion events have not yet triggered a swipe or drag." />
      <item value="auto increase type vale, start from 0." />
      <item value="/** * Called when a view created by this adapter has been detached from its window. * * &lt;p&gt;Becoming detached from the window is not necessarily a permanent condition; * the consumer of an Adapter's views may choose to cache views offscreen while they * are not visible, attaching and detaching them as appropriate.&lt;/p&gt; * * @param holder Holder of the view being detached" />
      <item value="* Called when a view created by this adapter has been attached to a window. * * &lt;p&gt;This can be used as a reasonable signal that the view is about to be seen * by the user. If the adapter previously freed any resources in * {@link #onViewDetachedFromWindow(RecyclerView.ViewHolder) onViewDetachedFromWindow} * those resources should be restored here.&lt;/p&gt; * * @param holder Holder of the view being attached" />
      <item value="Optional parameter, use null to identify a &quot;full&quot; update" />
      <item value="* * &lt;p&gt;Controls whether the pop-up will be informed of touch events outside * of its window. This only makes sense for pop-ups that are touchable * but not focusable, which means touches outside of the window will * be delivered to the window behind. The default is false.&lt;/p&gt; * * &lt;p&gt;If the popup is showing, calling this method will take effect only * the next time the popup is shown or through a manual call to one of * the {@link #update()} methods.&lt;/p&gt; * * @param touchable true if the popup should receive outside * touch events, false otherwise * * @see #isOutsideTouchable() * @see #isShowing() * @see #update()" />
      <item value="* Sets whether this view should display its own title. * * &lt;p&gt;The title displayed by this view will shrink and grow based on the scroll offset. * * @see #setTitle(CharSequence) * @see #isTitleEnabled() * @attr ref R.styleable#CollapsingToolbarLayout_titleEnabled" />
      <item value="* Indicates that only the current fragment will be in the {@link Lifecycle.State#RESUMED} * state. All other Fragments are capped at {@link Lifecycle.State#STARTED}. * * @see #FragmentPagerAdapter(FragmentManager, int) */" />
      <item value="* Indicates that {@link Fragment#setUserVisibleHint(boolean)} will be called when the current * fragment changes. * * @deprecated This behavior relies on the deprecated * {@link Fragment#setUserVisibleHint(boolean)} API. Use * {@link #BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT} to switch to its replacement, * {@link FragmentTransaction#setMaxLifecycle}. * @see #FragmentPagerAdapter(FragmentManager, int)" />
      <item value="* @param fm fragment manager that will interact with this adapter * @deprecated use {@link #FragmentPagerAdapter(FragmentManager, int)} with * {@link #BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT}" />
      <item value="Constructor for {@link FragmentPagerAdapter} that sets the fragment manager for the adapter. * This is the equivalent of calling {@link #FragmentPagerAdapter(FragmentManager, int)} and * passing in {@link #BEHAVIOR_SET_USER_VISIBLE_HINT}. * * &lt;p&gt;Fragments will have {@link Fragment#setUserVisibleHint(boolean)} called whenever the * current Fragment changes.&lt;/p&gt; * * @param fm fragment manager that will interact with this adapter * @deprecated use {@link #FragmentPagerAdapter(FragmentManager, int)} with * {@link #BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT}" />
      <item value="Specifies a background drawable for the action bar" />
      <item value="When set to true, the animation transformation is applied after the animation is over. The default value is false. If fillEnabled is not set to true and the animation is not set on a View, fillAfter is assumed to be true" />
      <item value="When set to true or when fillEnabled is not set to true, the animation transformation is applied before the animation has started. The default value is true" />
      <item value="When set to true, the value of fillBefore is taken into account" />
      <item value="Returns the number of span occupied by the item at &lt;code&gt;position&lt;/code&gt;. * * @param position The adapter position of the item * @return The number of spans occupied by the item at the provided position" />
      <item value="Specifies how an object should position relative to an anchor, on both the X and Y axes, within its parent's bounds" />
      <item value="The index of a keyline this view should position relative to. android:layout_gravity will affect how the view aligns to the specified keyline" />
      <item value="The class name of a Behavior class defining special runtime behavior for this child view" />
      <item value="The id of an anchor view that this view should position relative to" />
      <item value="Defines the alignment of the text" />
      <item value="The text appearance of the CollapsingToolbarLayouts title when it is fully 'collapsed" />
      <item value="The primary branding color for the app. By default, this is the color applied to the action bar background." />
      <item value="Specifies extra space on the end side of the the expanded title text. Margin values should be positive. --&gt;" />
      <item value="/** * Sets the text color and size for the collapsed title from the specified TextAppearance * resource. * * @attr ref * com.google.android.material.R.styleable#CollapsingToolbarLayout_collapsedTitleTextAppearance" />
      <item value="* Set whether home should be displayed as an &quot;up&quot; affordance. * Set this to true if selecting &quot;home&quot; returns up by a single level in your UI * rather than back to the top level or front page. * * &lt;p&gt;To set several display options at once, see the setDisplayOptions methods. * * @param showHomeAsUp true to show the user that selecting home will return one * level up rather than to the top level of the app. * * @see #setDisplayOptions(int) * @see #setDisplayOptions(int, int)" />
      <item value="Obtain the FirebaseAnalytics instance." />
      <item value="/** * Loads the native library specified by the &lt;code&gt;libname&lt;/code&gt; * argument. The &lt;code&gt;libname&lt;/code&gt; argument must not contain any platform * specific prefix, file extension or path. If a native library * called &lt;code&gt;libname&lt;/code&gt; is statically linked with the VM, then the * JNI_OnLoad_&lt;code&gt;libname&lt;/code&gt; function exported by the library is invoked. * See the JNI Specification for more details. * * Otherwise, the libname argument is loaded from a system library * location and mapped to a native library image in an implementation- * dependent manner. * &lt;p&gt; * The call &lt;code&gt;System.loadLibrary(name)&lt;/code&gt; is effectively * equivalent to the call * &lt;blockquote&gt;&lt;pre&gt; * Runtime.getRuntime().loadLibrary(name) * &lt;/pre&gt;&lt;/blockquote&gt; * * @param libname the name of the library. * @exception SecurityException if a security manager exists and its * &lt;code&gt;checkLink&lt;/code&gt; method doesn't allow * loading of the specified dynamic library * @exception UnsatisfiedLinkError if either the libname argument * contains a file path, the native library is not statically * linked with the VM, or the library cannot be mapped to a * native library image by the host system. * @exception NullPointerException if &lt;code&gt;libname&lt;/code&gt; is * &lt;code&gt;null&lt;/code&gt; * @see java.lang.Runtime#loadLibrary(java.lang.String) * @see java.lang.SecurityManager#checkLink(java.lang.String)" />
      <item value="* Sets the source to get the number of spans occupied by each item in the adapter. * * @param spanSizeLookup {@link SpanSizeLookup} instance to be used to query number of spans * occupied by each item" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="55" />
        <entry key="ENGLISH" value="56" />
      </map>
    </option>
  </component>
</application>